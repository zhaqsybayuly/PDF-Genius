import os
import json
import logging
from io import BytesIO
from typing import Dict, Any
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ConversationHandler,
    filters
)
from PIL import Image
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import A4
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.lib.utils import ImageReader

# –õ–æ–≥—Ç–∞—Ä–¥—ã “õ–æ—Å—É (debug “Ø—à—ñ–Ω)
logging.basicConfig(level=logging.DEBUG)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = "5316060523"  # –ê–¥–º–∏–Ω ID-—ñ“£—ñ–∑–¥—ñ –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑
STATS_FILE = "stats.json"
USERS_FILE = "users.json"

# –¢—ñ–ª–¥–µ—Ä
LANGUAGES = ["en", "kz", "ru", "uz", "tr", "ua"]
DEFAULT_LANG = "en"

# Conversation –∫“Ø–π–ª–µ—Ä—ñ
STATE_ACCUMULATE = 1

# –ì–ª–æ–±–∞–ª–¥—ã –¥–µ—Ä–µ–∫—Ç–µ—Ä (–ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã–ª–∞—Ä–¥—ã“£ –∂—ñ–±–µ—Ä–≥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç—Ç–µ—Ä—ñ–Ω —Å–∞“õ—Ç–∞–π–º—ã–∑)
user_data: Dict[int, Dict[str, Any]] = {}

# ReportLab “Ø—à—ñ–Ω “õ–∞—Ä—ñ–ø—Ç–µ—Ä–¥—ñ —Ç—ñ—Ä–∫–µ—É (“õ–∞—Ä—ñ–ø —Ñ–∞–π–ª—ã–Ω—ã“£ –∂–æ–ª—ã–Ω —Ç–µ–∫—Å–µ—Ä—ñ“£—ñ–∑!)
pdfmetrics.registerFont(TTFont('NotoSans', 'fonts/NotoSans.ttf'))

# --------------- –ê—É–¥–∞—Ä–º–∞–ª–∞—Ä–¥—ã –∂“Ø–∫—Ç–µ—É –∂”ô–Ω–µ –±–∞—Å“õ–∞ –∫”©–º–µ–∫—à—ñ —Ñ—É–Ω–∫—Ü–∏—è–ª–∞—Ä ---------------

def load_translations(lang_code: str) -> Dict[str, str]:
    try:
        with open(f"translations/{lang_code}.json", "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return load_translations(DEFAULT_LANG)

def get_user_lang(user_id: int) -> str:
    try:
        with open(USERS_FILE, "r") as f:
            users = json.load(f)
        return users.get(str(user_id), DEFAULT_LANG)
    except:
        return DEFAULT_LANG

def save_user_lang(user_id: int, lang_code: str):
    try:
        with open(USERS_FILE, "r") as f:
            users = json.load(f)
    except:
        users = {}
    users[str(user_id)] = lang_code
    with open(USERS_FILE, "w") as f:
        json.dump(users, f)

def save_stats(action: str):
    stats = {"total": 0, "items": 0}
    try:
        with open(STATS_FILE, "r") as f:
            stats = json.load(f)
    except:
        pass
    stats["total"] += 1
    stats["items"] += 1
    with open(STATS_FILE, "w") as f:
        json.dump(stats, f)

# --------------- –ë–∞—Å—Ç–∞–ø“õ—ã —Ö–∞–±–∞—Ä–ª–∞–º–∞ –∂”ô–Ω–µ —Ç—ñ–ª–¥—ñ —Ç–∞“£–¥–∞—É ---------------

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    # –¢—ñ–ª —Ç–∞“£–¥–∞—É –¥–µ—Ä–µ–∫—Ç–µ—Ä—ñ–Ω –∂“Ø–∫—Ç–µ—É
    lang_code = get_user_lang(user_id)
    trans = load_translations(lang_code)
    # Conversation-–¥—ã –±–∞—Å—Ç–∞–ø, –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã–Ω—ã“£ –∂–∏–Ω–∞—É –±—É—Ñ–µ—Ä—ñ–Ω —Ç–∞–∑–∞–ª–∞–π–º—ã–∑
    user_data[user_id] = {"items": []}
    # –¢—ñ–ª —Ç–∞“£–¥–∞—É –±–∞—Ç—ã—Ä–º–∞–ª–∞—Ä—ã –±–∞—Ä —Ö–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä–µ–º—ñ–∑
    await update.message.reply_text(
        trans["welcome"],
        reply_markup=language_keyboard()
    )
    
async def change_language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    lang_code = query.data.split("_")[1]
    user_id = query.from_user.id
    save_user_lang(user_id, lang_code)
    trans = load_translations(lang_code)
    await query.edit_message_text(trans["lang_selected"])
    # “ö–∞–π—Ç–∞ –Ω–µ–≥—ñ–∑–≥—ñ –∂–∏–Ω–∞—É —Ä–µ–∂–∏–º—ñ–Ω–µ ”©—Ç—É
    await send_initial_instruction(update, context, lang_code)

def language_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üá¨üáß English", callback_data="lang_en"),
         InlineKeyboardButton("üá∞üáø “ö–∞–∑–∞“õ", callback_data="lang_kz"),
         InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru")],
        [InlineKeyboardButton("üá∫üáø O'zbek", callback_data="lang_uz"),
         InlineKeyboardButton("üáπüá∑ T√ºrk√ße", callback_data="lang_tr"),
         InlineKeyboardButton("üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", callback_data="lang_ua")]
    ])

async def send_initial_instruction(update: Update, context: ContextTypes.DEFAULT_TYPE, lang_code: str):
    """–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã“ì–∞ –±–∞—Å—Ç–∞–ø“õ—ã –Ω“±—Å“õ–∞—É–¥—ã “õ–∞–π—Ç–∞ –∂—ñ–±–µ—Ä–µ–º—ñ–∑ (—ç–ª–µ–º–µ–Ω—Ç–¥–µ—Ä –±—É—Ñ–µ—Ä—ñ –±–æ—Å –±–æ–ª“ì–∞–Ω–¥–∞)"""
    trans = load_translations(lang_code)
    keyboard = ReplyKeyboardMarkup(
        [[trans["btn_change_lang"], trans["btn_help"]]],
        resize_keyboard=True
    )
    # –ë–∞—Å—Ç–∞–ø“õ—ã –Ω“±—Å“õ–∞—É: —Ñ–∞–π–ª, —Å—É—Ä–µ—Ç –Ω–µ–º–µ—Å–µ –º”ô—Ç—ñ–Ω –∂—ñ–±–µ—Ä—ñ“£—ñ–∑...
    text = trans["instruction_initial"]
    # –ï–≥–µ—Ä update-—Ç—ñ“£ –∫”©–∑—ñ message –±–æ–ª–º–∞—Å–∞, callbackQuery-–¥–µ–Ω –∂–∞—É–∞–ø “õ–∞–π—Ç–∞—Ä–∞–º—ã–∑
    target = update.effective_message if update.effective_message else update.message
    await target.reply_text(text, reply_markup=keyboard)

# --------------- –ù–µ–≥—ñ–∑–≥—ñ –∂–∏–Ω–∞—É —Ñ—É–Ω–∫—Ü–∏—è—Å—ã (ACCUMULATE) ---------------

async def accumulate_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    lang_code = get_user_lang(user_id)
    trans = load_translations(lang_code)
    text = update.message.text.strip() if update.message.text else ""
    
    # –ï–≥–µ—Ä –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã "PDF-–∫–µ –∞–π–Ω–∞–ª–¥—ã—Ä—É" –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω –±–∞—Å—Å–∞:
    if text == trans["btn_convert_pdf"]:
        return await convert_pdf(update, context)
    # –ï–≥–µ—Ä –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã "–¢—ñ–ª –∞—É—ã—Å—Ç—ã—Ä—É" –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω –±–∞—Å—Å–∞:
    if text == trans["btn_change_lang"]:
        return await trigger_change_lang(update, context)
    # –ï–≥–µ—Ä –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã "–ö”©–º–µ–∫" –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω –±–∞—Å—Å–∞:
    if text == trans["btn_help"]:
        return await trigger_help(update, context)
    
    # –•–∞–±–∞—Ä–ª–∞–º–∞ ‚Äì —Ñ–∞–π–ª, —Å—É—Ä–µ—Ç –Ω–µ–º–µ—Å–µ –º”ô—Ç—ñ–Ω, –æ–Ω—ã ”©“£–¥–µ–ø –∂–∏–Ω–∞–π–º—ã–∑
    await process_incoming_item(update, context)
    # –ñ–∏–Ω–∞“õ—Ç–∞–ª“ì–∞–Ω–Ω–∞–Ω –∫–µ–π—ñ–Ω, –∂–∞“£–∞—Ä—Ç—ã–ª“ì–∞–Ω –Ω“±—Å“õ–∞—É —Ö–∞–±–∞—Ä–ª–∞–º–∞—Å—ã–Ω –∂—ñ–±–µ—Ä–µ–º—ñ–∑
    keyboard = ReplyKeyboardMarkup(
        [[trans["btn_convert_pdf"]],
         [trans["btn_change_lang"], trans["btn_help"]]],
        resize_keyboard=True
    )
    # update.effective_chat.send_message() –∞—Ä“õ—ã–ª—ã –∂—ñ–±–µ—Ä–µ–º—ñ–∑:
    await update.effective_chat.send_message(trans["instruction_accumulated"], reply_markup=keyboard)
    return STATE_ACCUMULATE

async def process_incoming_item(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö—ñ—Ä–≥–µ–Ω —Ö–∞–±–∞—Ä–ª–∞–º–∞–Ω—ã ”©“£–¥–µ–ø, —Ç–∏—ñ—Å—Ç—ñ —Ç“Ø—Ä–¥–µ–≥—ñ —ç–ª–µ–º–µ–Ω—Ç —Ä–µ—Ç—ñ–Ω–¥–µ –∂–∏–Ω–∞–π–º—ã–∑."""
    user_id = update.effective_user.id
    lang_code = get_user_lang(user_id)
    trans = load_translations(lang_code)
    # ”ò—Ä–±—ñ—Ä –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã–Ω—ã“£ –±—É—Ñ–µ—Ä—ñ –±–∞—Ä –¥–µ–ø –µ—Å–µ–ø—Ç–µ–π–º—ñ–∑
    if "items" not in user_data.get(user_id, {}):
        user_data[user_id] = {"items": []}
    
    # –ï–≥–µ—Ä –º”ô—Ç—ñ–Ω –±–æ–ª—Å–∞:
    if update.message.text and not update.message.photo and not update.message.document:
        item = {"type": "text", "content": update.message.text}
        user_data[user_id]["items"].append(item)
    # –ï–≥–µ—Ä —Ñ–æ—Ç–æ –±–æ–ª—Å–∞:
    elif update.message.photo:
        photo_file = await update.message.photo[-1].get_file()
        bio = BytesIO()
        await photo_file.download_to_memory(bio)
        bio.seek(0)
        item = {"type": "photo", "content": bio}
        user_data[user_id]["items"].append(item)
    # –ï–≥–µ—Ä “õ“±–∂–∞—Ç –±–æ–ª—Å–∞:
    elif update.message.document:
        doc = update.message.document
        filename = doc.file_name.lower()
        ext = os.path.splitext(filename)[1]
        file_obj = await doc.get_file()
        bio = BytesIO()
        await file_obj.download_to_memory(bio)
        bio.seek(0)
        # –ï–≥–µ—Ä —Å—É—Ä–µ—Ç –∫–µ“£–µ–π—Ç—ñ–ª—ñ–º—ñ –±–æ–ª—Å–∞ ‚Äì –æ–Ω—ã —Ñ–æ—Ç–æ —Ä–µ—Ç—ñ–Ω–¥–µ “õ–∞—Ä–∞—Å—Ç—ã—Ä–∞–º—ã–∑
        if ext in [".jpg", ".jpeg", ".png", ".gif"]:
            item = {"type": "photo", "content": bio}
        # –ï–≥–µ—Ä –º”ô—Ç—ñ–Ω–¥—ñ–∫ —Ñ–∞–π–ª (.txt) –±–æ–ª—Å–∞:
        elif ext == ".txt":
            try:
                content = bio.read().decode("utf-8")
            except Exception:
                content = "–ú”ô—Ç—ñ–Ω–¥—ñ –æ“õ—É –º“Ø–º–∫—ñ–Ω –µ–º–µ—Å."
            item = {"type": "text", "content": content}
        else:
            # –ë–∞—Å“õ–∞ —Ñ–∞–π–ª–¥–∞—Ä–¥—ã –∞—Ç–∞—É—ã –∞—Ä“õ—ã–ª—ã —Ö–∞–±–∞—Ä–ª–∞–º–∞–º–µ–Ω “õ–æ—Å–∞–º—ã–∑
            item = {"type": "text", "content": f"–§–∞–π–ª “õ–æ—Å—ã–ª–¥—ã: {doc.file_name}"}
        user_data[user_id]["items"].append(item)
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞“ì–∞ –∂–∞–∑–∞–º—ã–∑
    save_stats("item")

async def convert_pdf(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ñ–∏–Ω–∞“õ—Ç–∞–ª“ì–∞–Ω –±–∞—Ä–ª—ã“õ —ç–ª–µ–º–µ–Ω—Ç—Ç–µ—Ä–¥—ñ –±—ñ—Ä—ñ–∫—Ç—ñ—Ä—ñ–ø PDF “õ“±—Ä–∞—Å—Ç—ã—Ä—ã–ø, –∂—ñ–±–µ—Ä–µ–º—ñ–∑."""
    user_id = update.effective_user.id
    lang_code = get_user_lang(user_id)
    trans = load_translations(lang_code)
    items = user_data.get(user_id, {}).get("items", [])
    if not items:
        await update.message.reply_text(trans["no_items_error"])
        return STATE_ACCUMULATE

    pdf_buffer = BytesIO()
    c = canvas.Canvas(pdf_buffer, pagesize=A4)
    width, height = A4

    for item in items:
        if item["type"] == "text":
            # ”ò—Ä –º”ô—Ç—ñ–Ω —ç–ª–µ–º–µ–Ω—Ç—ñ–Ω –∂–∞“£–∞ –±–µ—Ç–∫–µ —à—ã“ì–∞—Ä–∞–º—ã–∑
            c.setFont("NotoSans", 12)
            # –ú”ô—Ç—ñ–Ω–¥—ñ –∂–æ–ª –±–æ–π—ã–Ω—à–∞ –±”©–ª—ñ–ø —à—ã“ì–∞—Ä—É (–∞—Ä–∞–ª—ã“ì—ã 20 –ø—É–Ω–∫—Ç)
            text_lines = item["content"].split("\n")
            y_position = height - 50
            for line in text_lines:
                c.drawString(40, y_position, line)
                y_position -= 20
                if y_position < 50:
                    c.showPage()
                    c.setFont("NotoSans", 12)
                    y_position = height - 50
            c.showPage()
        elif item["type"] == "photo":
            # –°—É—Ä–µ—Ç—Ç—ñ –±–µ—Ç–∫–µ –æ—Ä–Ω–∞–ª–∞—Å—Ç—ã—Ä—É (–æ—Ä—Ç–∞–ª—ã“õ—Ç–∞–Ω–¥—ã—Ä—É –∂”ô–Ω–µ A4-–∫–µ —Å—ã–π–¥—ã—Ä—É)
            try:
                item["content"].seek(0)
                img = Image.open(item["content"])
                img_width, img_height = img.size
                max_width = width - 80
                max_height = height - 80
                scale = min(max_width / img_width, max_height / img_height, 1)
                new_width = img_width * scale
                new_height = img_height * scale
                x = (width - new_width) / 2
                y = (height - new_height) / 2
                c.drawImage(ImageReader(img), x, y, width=new_width, height=new_height)
            except Exception as e:
                c.setFont("NotoSans", 12)
                c.drawString(40, height/2, f"–°—É—Ä–µ—Ç—Ç—ñ —à—ã“ì–∞—Ä—É –º“Ø–º–∫—ñ–Ω –µ–º–µ—Å: {e}")
            c.showPage()
    c.save()
    pdf_buffer.seek(0)

    filename = f"combined_{datetime.now().strftime('%Y%m%d%H%M%S')}.pdf"
    await update.message.reply_document(
        document=pdf_buffer,
        filename=filename,
        caption=trans["pdf_ready"]
    )
    # –ñ—ñ–±–µ—Ä—ñ–ª–≥–µ–Ω–Ω–µ–Ω –∫–µ–π—ñ–Ω –±—É—Ñ–µ—Ä–¥—ñ —Ç–∞–∑–∞–ª–∞–π–º—ã–∑
    user_data[user_id]["items"] = []
    # “ö–∞–π—Ç–∞ –±–∞—Å—Ç–∞–ø“õ—ã –Ω“±—Å“õ–∞—É–¥—ã –∂—ñ–±–µ—Ä–µ–º—ñ–∑
    await update.message.reply_text(trans["instruction_initial"],
                                    reply_markup=ReplyKeyboardMarkup(
                                        [[trans["btn_change_lang"], trans["btn_help"]]],
                                        resize_keyboard=True))
    return STATE_ACCUMULATE

# --------------- –¢—ñ–ª –∞—É—ã—Å—Ç—ã—Ä—É –∂”ô–Ω–µ –∫”©–º–µ–∫ —Ñ—É–Ω–∫—Ü–∏—è–ª–∞—Ä—ã ---------------

async def trigger_change_lang(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    lang_code = get_user_lang(user_id)
    trans = load_translations(lang_code)
    await update.message.reply_text(trans["choose_language"], reply_markup=language_keyboard())
    return STATE_ACCUMULATE

async def trigger_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    lang_code = get_user_lang(user_id)
    trans = load_translations(lang_code)
    await update.message.reply_text(trans["help_text"])
    return STATE_ACCUMULATE

# --------------- –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å (“õ–æ—Å—ã–º—à–∞) ---------------

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if str(user_id) != ADMIN_ID:
        return
    try:
        with open(STATS_FILE, "r") as f:
            stats = json.load(f)
    except:
        stats = {"total": 0, "items": 0}
    try:
        with open(USERS_FILE, "r") as f:
            users = json.load(f)
    except:
        users = {}
    total_users = len(users)
    text = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"‚Ä¢ –ñ–∞–ª–ø—ã ”ô—Ä–µ–∫–µ—Ç: {stats['total']}\n"
        f"‚Ä¢ –ñ—ñ–±–µ—Ä—ñ–ª–≥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç—Ç–µ—Ä: {stats['items']}\n"
        f"‚Ä¢ –ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã–ª–∞—Ä: {total_users}"
    )
    await update.message.reply_text(text)

async def reset_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if str(user_id) != ADMIN_ID:
        return
    stats = {"total": 0, "items": 0}
    with open(STATS_FILE, "w") as f:
        json.dump(stats, f)
    await update.message.reply_text("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞–∑–∞–ª–∞–Ω–¥—ã.")

# --------------- ConversationHandler-–¥—ñ —Ç–æ“õ—Ç–∞—Ç—É (–º—ã—Å–∞–ª—ã, /cancel) ---------------

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in user_data:
        del user_data[user_id]
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è —Ç–æ“õ—Ç–∞—Ç—ã–ª–¥—ã. /start –∞—Ä“õ—ã–ª—ã “õ–∞–π—Ç–∞ –±–∞—Å—Ç–∞“£—ã–∑.")
    return ConversationHandler.END

# --------------- –ù–µ–≥—ñ–∑–≥—ñ —Ñ—É–Ω–∫—Ü–∏—è ---------------

if __name__ == "__main__":
    application = ApplicationBuilder().token(BOT_TOKEN).build()

    # –°—Ç–∞–Ω–¥–∞—Ä—Ç—Ç—ã –∫–æ–º–∞–Ω–¥–∞–ª–∞—Ä
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("admin", admin_panel))
    application.add_handler(CommandHandler("resetstats", reset_stats))
    application.add_handler(CallbackQueryHandler(change_language, pattern="^lang_"))

    # ConversationHandler: –±–∞—Ä–ª—ã“õ —ç–ª–µ–º–µ–Ω—Ç—Ç–µ—Ä–¥—ñ –∂–∏–Ω–∞—É –∂”ô–Ω–µ PDF –∂–∞—Å–∞—É
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            STATE_ACCUMULATE: [
                MessageHandler(filters.ALL & ~filters.COMMAND, accumulate_handler)
            ]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )
    application.add_handler(conv_handler)

    # –í–µ–±—Ö—É–∫ –Ω–µ–º–µ—Å–µ polling (–æ—Å—ã –º—ã—Å–∞–ª–¥–∞ –≤–µ–±—Ö—É–∫ “õ–æ–ª–¥–∞–Ω—ã–ª–∞–¥—ã)
    application.run_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get("PORT", 10000)),
        webhook_url=os.environ.get("WEBHOOK_URL")
    )
