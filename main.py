import os
import json
import logging
import subprocess
import tempfile
import textwrap
from io import BytesIO
from typing import Dict, Any, List
from datetime import datetime
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    Message
)
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ConversationHandler,
    filters
)
from PIL import Image
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import A4
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.lib.utils import ImageReader
from PyPDF2 import PdfMerger

# –õ–æ–≥—Ç–∞—Ä–¥—ã “õ–æ—Å—É (debug “Ø—à—ñ–Ω)
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = "5316060523"  # ”®–∑ –∞–¥–º–∏–Ω ID-—ñ“£—ñ–∑–¥—ñ –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑
STATS_FILE = "stats.json"
USERS_FILE = "users.json"

# --- –¢—ñ–ª–¥–µ—Ä ---
LANGUAGES = ["en", "kz", "ru", "uz", "tr", "ua"]
DEFAULT_LANG = "en"

# --- Conversation –∫“Ø–π–ª–µ—Ä—ñ ---
STATE_ACCUMULATE = 1

# –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—ñ conversation –∫“Ø–π–ª–µ—Ä—ñ
ADMIN_MENU = 10
ADMIN_BROADCAST = 11
ADMIN_FORWARD = 12

# --- –ì–ª–æ–±–∞–ª–¥—ã –¥–µ—Ä–µ–∫—Ç–µ—Ä ---
# ”ò—Ä–±—ñ—Ä –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã–Ω—ã“£ –∂–∏–Ω–∞“õ—Ç–∞–ª“ì–∞–Ω —ç–ª–µ–º–µ–Ω—Ç—Ç–µ—Ä—ñ–Ω —Å–∞“õ—Ç–∞–π–º—ã–∑
user_data: Dict[int, Dict[str, Any]] = {}

# ReportLab “õ–∞—Ä—ñ–ø—Ç–µ—Ä—ñ–Ω —Ç—ñ—Ä–∫–µ—É (“õ–∞—Ä—ñ–ø —Ñ–∞–π–ª—ã–Ω—ã“£ –∂–æ–ª—ã–Ω —Ç–µ–∫—Å–µ—Ä—ñ“£—ñ–∑!)
pdfmetrics.registerFont(TTFont('NotoSans', 'fonts/NotoSans.ttf'))

# --- –ö”©–º–µ–∫—à—ñ —Ñ—É–Ω–∫—Ü–∏—è–ª–∞—Ä ---

def load_translations(lang_code: str) -> Dict[str, str]:
    try:
        with open(f"translations/{lang_code}.json", "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        with open(f"translations/{DEFAULT_LANG}.json", "r", encoding="utf-8") as f:
            return json.load(f)

def get_user_lang(user_id: int) -> str:
    try:
        with open(USERS_FILE, "r") as f:
            users = json.load(f)
        return users.get(str(user_id), DEFAULT_LANG)
    except Exception as e:
        logger.error(f"Error reading USERS_FILE: {e}")
        return DEFAULT_LANG

def save_user_lang(user_id: int, lang_code: str):
    try:
        with open(USERS_FILE, "r") as f:
            users = json.load(f)
    except Exception:
        users = {}
    users[str(user_id)] = lang_code
    with open(USERS_FILE, "w") as f:
        json.dump(users, f)

def save_stats(action: str):
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞“ì–∞: –∂–∞–ª–ø—ã ”ô—Ä–µ–∫–µ—Ç —Å–∞–Ω—ã, —ç–ª–µ–º–µ–Ω—Ç—Ç–µ—Ä —Å–∞–Ω—ã –∂”ô–Ω–µ PDF —Ñ–∞–π–ª–¥–∞—Ä—ã —Å–∞–Ω—ã –±–∞“õ—ã–ª–∞–Ω–∞–¥—ã.
    stats = {"total": 0, "items": 0, "pdf_count": 0}
    try:
        with open(STATS_FILE, "r") as f:
            stats = json.load(f)
    except Exception:
        pass
    stats["total"] += 1
    if action == "item":
        stats["items"] += 1
    elif action == "pdf":
        stats["pdf_count"] += 1
    with open(STATS_FILE, "w") as f:
        json.dump(stats, f)

def get_all_users() -> List[int]:
    try:
        with open(USERS_FILE, "r") as f:
            users = json.load(f)
        return [int(uid) for uid in users.keys()]
    except Exception as e:
        logger.error(f"Error loading users: {e}")
        return []

def convert_office_to_pdf(bio: BytesIO, original_filename: str) -> BytesIO:
    """
    LibreOffice –∞—Ä“õ—ã–ª—ã –æ—Ñ–∏—Å —Ñ–∞–π–ª–¥–∞—Ä—ã–Ω PDF-–∫–µ –∞–π–Ω–∞–ª–¥—ã—Ä–∞–¥—ã.
    –ë“±–ª —Ñ—É–Ω–∫—Ü–∏—è —É–∞“õ—ã—Ç—Ç—ã –∞–ª–∞–¥—ã –∂”ô–Ω–µ —É–∞“õ—ã—Ç—à–∞ —Ñ–∞–π–ª–¥–∞—Ä–¥—ã “õ–æ–ª–¥–∞–Ω–∞–¥—ã.
    """
    with tempfile.NamedTemporaryFile(delete=False, suffix=os.path.splitext(original_filename)[1]) as tmp_in:
        tmp_in.write(bio.getbuffer())
        tmp_in.flush()
        input_path = tmp_in.name

    output_dir = tempfile.gettempdir()
    try:
        # LibreOffice headless —Ä–µ–∂–∏–º—ñ–Ω–¥–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è
        subprocess.run([
            "libreoffice", "--headless", "--convert-to", "pdf", "--outdir", output_dir, input_path
        ], check=True)
        # –®—ã“ì—É PDF —Ñ–∞–π–ª—ã–Ω—ã“£ –∂–æ–ª—ã–Ω –∞–ª—É
        output_path = os.path.join(output_dir, os.path.splitext(os.path.basename(input_path))[0] + ".pdf")
        with open(output_path, "rb") as f:
            pdf_bytes = BytesIO(f.read())
        return pdf_bytes
    except Exception as e:
        logger.error(f"Office to PDF conversion error: {e}")
        # –ï–≥–µ—Ä –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å”ô—Ç—Å—ñ–∑ –±–æ–ª—Å–∞, —Ñ–∞–π–ª–¥—ã –º”ô—Ç—ñ–Ω —Ä–µ—Ç—ñ–Ω–¥–µ —Å–∞“õ—Ç–∞—É
        fallback = BytesIO()
        fallback.write(f"Unable to convert file: {original_filename}".encode("utf-8"))
        fallback.seek(0)
        return fallback
    finally:
        try:
            os.remove(input_path)
        except Exception:
            pass

def generate_item_pdf(item: Dict[str, Any]) -> BytesIO:
    """
    –ï–≥–µ—Ä —ç–ª–µ–º–µ–Ω—Ç —Ç–∏–ø—ñ —Ç–µ–∫—Å—Ç –Ω–µ–º–µ—Å–µ —Ñ–æ—Ç–æ –±–æ–ª—Å–∞, –æ–Ω—ã –∂–µ–∫–µ PDF –±–µ—Ç—ñ–Ω–µ –∞–π–Ω–∞–ª–¥—ã—Ä–∞–¥—ã.
    –ú”ô—Ç—ñ–Ω “Ø—à—ñ–Ω –∞–≤—Ç–æ–º–∞—Ç—Ç—ã —Ç“Ø—Ä–¥–µ –∂–æ–ª–¥–∞—Ä–¥—ã –æ—Ä–∞–ø —à—ã“ì—É (wrap) “õ–∞–º—Ç–∞–º–∞—Å—ã–∑ –µ—Ç—ñ–ª–µ–¥—ñ.
    """
    buffer = BytesIO()
    c = canvas.Canvas(buffer, pagesize=A4)
    width, height = A4
    if item["type"] == "text":
        c.setFont("NotoSans", 12)
        # –ï“£ –∞–ª–¥—ã–º–µ–Ω, –º”ô—Ç—ñ–Ω–¥—ñ –∞–ª–¥—ã–Ω –∞–ª–∞ –æ—Ä–∞–ø —à—ã“ì–∞–º—ã–∑ (max 80 —Å–∏–º–≤–æ–ª, –±–∞“ì–∞–Ω“ì–∞ –±–∞–π–ª–∞–Ω—ã—Å—Ç—ã)
        wrapped_text = []
        for line in item["content"].split("\n"):
            wrapped_text.extend(textwrap.wrap(line, width=80))
        y_position = height - 50
        for line in wrapped_text:
            c.drawString(40, y_position, line)
            y_position -= 20
            if y_position < 50:
                c.showPage()
                c.setFont("NotoSans", 12)
                y_position = height - 50
        c.showPage()
    elif item["type"] == "photo":
        try:
            item["content"].seek(0)
            img = Image.open(item["content"])
            img_width, img_height = img.size
            max_width = width - 80
            max_height = height - 80
            scale = min(max_width / img_width, max_height / img_height, 1)
            new_width = img_width * scale
            new_height = img_height * scale
            x = (width - new_width) / 2
            y = (height - new_height) / 2
            c.drawImage(ImageReader(img), x, y, width=new_width, height=new_height)
        except Exception as e:
            c.setFont("NotoSans", 12)
            c.drawString(40, height / 2, f"Error displaying image: {e}")
        c.showPage()
    c.save()
    buffer.seek(0)
    return buffer

# --- –ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ñ ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    lang_code = get_user_lang(user_id)
    trans = load_translations(lang_code)
    user_data[user_id] = {"items": []}
    await update.message.reply_text(
        trans["welcome"],
        reply_markup=language_keyboard()
    )

def language_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üá¨üáß English", callback_data="lang_en"),
         InlineKeyboardButton("üá∞üáø “ö–∞–∑–∞“õ", callback_data="lang_kz"),
         InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru")],
        [InlineKeyboardButton("üá∫üáø O'zbek", callback_data="lang_uz"),
         InlineKeyboardButton("üáπüá∑ T√ºrk√ße", callback_data="lang_tr"),
         InlineKeyboardButton("üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", callback_data="lang_ua")]
    ])

async def change_language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    lang_code = query.data.split("_")[1]
    user_id = query.from_user.id
    save_user_lang(user_id, lang_code)
    trans = load_translations(lang_code)
    await query.edit_message_text(trans["lang_selected"])
    await send_initial_instruction(update, context, lang_code)

async def send_initial_instruction(update: Update, context: ContextTypes.DEFAULT_TYPE, lang_code: str):
    trans = load_translations(lang_code)
    keyboard = ReplyKeyboardMarkup(
        [[trans["btn_change_lang"], trans["btn_help"]]],
        resize_keyboard=True
    )
    text = trans["instruction_initial"]
    target = update.effective_message if update.effective_message else update.message
    await target.reply_text(text, reply_markup=keyboard)

# --- –ñ–∏–Ω–∞“õ—Ç–∞—É –∂”ô–Ω–µ PDF –∂–∞—Å–∞—É –∂“Ø–π–µ—Å—ñ ---

async def accumulate_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    lang_code = get_user_lang(user_id)
    trans = load_translations(lang_code)
    msg_text = update.message.text.strip() if update.message.text else ""
    # –ï–≥–µ—Ä "PDF-–∫–µ –∞–π–Ω–∞–ª–¥—ã—Ä—É" –±–∞—Ç—ã—Ä–º–∞—Å—ã –±–∞—Å—ã–ª—Å–∞:
    if msg_text == trans["btn_convert_pdf"]:
        return await convert_pdf(update, context)
    if msg_text == trans["btn_change_lang"]:
        return await trigger_change_lang(update, context)
    if msg_text == trans["btn_help"]:
        return await trigger_help(update, context)
    
    # –•–∞–±–∞—Ä–ª–∞–º–∞ ‚Äì –º”ô—Ç—ñ–Ω, —Ñ–æ—Ç–æ –Ω–µ–º–µ—Å–µ “õ“±–∂–∞—Ç:
    await process_incoming_item(update, context)
    # ”ò—Ä–±—ñ—Ä —Ö–∞–±–∞—Ä–ª–∞–º–∞–¥–∞–Ω –∫–µ–π—ñ–Ω —Ç–µ–∫ –±—ñ—Ä —Ä–µ—Ç –∂–∞“£–∞—Ä—Ç—ã–ª“ì–∞–Ω –Ω“±—Å“õ–∞—É —Ö–∞–±–∞—Ä–ª–∞–º–∞—Å—ã –∂—ñ–±–µ—Ä—ñ–ª–µ–¥—ñ.
    keyboard = ReplyKeyboardMarkup(
        [[trans["btn_convert_pdf"]],
         [trans["btn_change_lang"], trans["btn_help"]]],
        resize_keyboard=True
    )
    await update.effective_chat.send_message(trans["instruction_accumulated"], reply_markup=keyboard)
    return STATE_ACCUMULATE

async def process_incoming_item(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö—ñ—Ä–≥–µ–Ω —Ö–∞–±–∞—Ä–ª–∞–º–∞–Ω—ã —Ç–∏—ñ—Å—Ç—ñ —Ç–∏–ø–∫–µ “õ–∞—Ä–∞–π –∂–∏–Ω–∞–π–º—ã–∑."""
    user_id = update.effective_user.id
    lang_code = get_user_lang(user_id)
    if "items" not in user_data.get(user_id, {}):
        user_data[user_id] = {"items": []}
    
    # –ú”ô—Ç—ñ–Ω (—Ñ–∞–π–ª –µ–º–µ—Å)
    if update.message.text and not update.message.photo and not update.message.document:
        item = {"type": "text", "content": update.message.text}
        user_data[user_id]["items"].append(item)
    # –°—É—Ä–µ—Ç
    elif update.message.photo:
        photo_file = await update.message.photo[-1].get_file()
        bio = BytesIO()
        await photo_file.download_to_memory(bio)
        bio.seek(0)
        item = {"type": "photo", "content": bio}
        user_data[user_id]["items"].append(item)
    # “ö“±–∂–∞—Ç—Ç–∞—Ä: PDF, Office (Word, PowerPoint) –Ω–µ–º–µ—Å–µ –±–∞—Å“õ–∞–ª–∞—Ä
    elif update.message.document:
        doc = update.message.document
        filename = doc.file_name.lower()
        ext = os.path.splitext(filename)[1]
        file_obj = await doc.get_file()
        bio = BytesIO()
        await file_obj.download_to_memory(bio)
        bio.seek(0)
        if ext in [".jpg", ".jpeg", ".png", ".gif"]:
            item = {"type": "photo", "content": bio}
        elif ext == ".pdf":
            item = {"type": "pdf", "content": bio}
        elif ext in [".doc", ".docx", ".ppt", ".pptx"]:
            converted = convert_office_to_pdf(bio, filename)
            item = {"type": "pdf", "content": converted}
        else:
            # –ë–∞—Å“õ–∞ —Ñ–∞–π–ª–¥–∞—Ä–¥—ã –º”ô—Ç—ñ–Ω —Ä–µ—Ç—ñ–Ω–¥–µ —Ö–∞–±–∞—Ä–ª–∞–º–∞–º–µ–Ω —Ç—ñ—Ä–∫–µ–π–º—ñ–∑
            item = {"type": "text", "content": f"–§–∞–π–ª “õ–æ—Å—ã–ª–¥—ã: {doc.file_name}"}
        user_data[user_id]["items"].append(item)
    save_stats("item")

async def convert_pdf(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ñ–∏–Ω–∞“õ—Ç–∞–ª“ì–∞–Ω –±–∞—Ä–ª—ã“õ —ç–ª–µ–º–µ–Ω—Ç—Ç–µ—Ä–¥—ñ –±—ñ—Ä—ñ–∫—Ç—ñ—Ä—ñ–ø PDF “õ“±–∂–∞—Ç—ã–Ω –∂–∞—Å–∞–π–¥—ã."""
    user_id = update.effective_user.id
    lang_code = get_user_lang(user_id)
    trans = load_translations(lang_code)
    items = user_data.get(user_id, {}).get("items", [])
    if not items:
        await update.message.reply_text(trans["no_items_error"])
        return STATE_ACCUMULATE

    # –ñ“Ø–∫—Ç–µ–ª—É –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Ö–∞–±–∞—Ä–ª–∞–º–∞—Å—ã:
    loading_msg = await update.effective_chat.send_message("Generating PDF... ‚è≥")
    
    # ”ò—Ä–±—ñ—Ä —ç–ª–µ–º–µ–Ω—Ç “Ø—à—ñ–Ω –∂–µ–∫–µ PDF —Ñ–∞–π–ª—ã–Ω “õ“±—Ä–∞–º—ã–∑:
    pdf_list = []
    for item in items:
        if item["type"] in ["text", "photo"]:
            pdf_file = generate_item_pdf(item)
            pdf_list.append(pdf_file)
        elif item["type"] == "pdf":
            # –ï–≥–µ—Ä —ç–ª–µ–º–µ–Ω—Ç PDF –±–æ–ª—Å–∞, –æ–Ω—ã —Ç—ñ–∫–µ–ª–µ–π “õ–æ—Å–∞–º—ã–∑
            pdf_list.append(item["content"])
    
    # PDF —Ñ–∞–π–ª–¥–∞—Ä—ã–Ω –±—ñ—Ä—ñ–∫—Ç—ñ—Ä—É “Ø—à—ñ–Ω PdfMerger “õ–æ–ª–¥–∞–Ω—ã–ª–∞–¥—ã
    merger = PdfMerger()
    for pdf_io in pdf_list:
        merger.append(pdf_io)
    output_buffer = BytesIO()
    merger.write(output_buffer)
    merger.close()
    output_buffer.seek(0)
    
    # PDF —Ñ–∞–π–ª–¥–∞—Ä—ã–Ω—ã“£ —Å–∞–Ω—ã–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞“ì–∞ –∂–∞–∑–∞–º—ã–∑
    save_stats("pdf")
    
    filename = f"combined_{datetime.now().strftime('%Y%m%d%H%M%S')}.pdf"
    # –°–æ“£“ì—ã –Ω”ô—Ç–∏–∂–µ –∂—ñ–±–µ—Ä—ñ–ª–µ—Ç—ñ–Ω —Ö–∞–±–∞—Ä–ª–∞–º–∞
    await update.message.reply_document(
        document=output_buffer,
        filename=filename,
        caption=trans["pdf_ready"]
    )
    # –ñ“Ø–∫—Ç–µ–ª—É –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Ö–∞–±–∞—Ä–ª–∞–º–∞—Å—ã–Ω ”©—à—ñ—Ä–µ–º—ñ–∑ –Ω–µ–º–µ—Å–µ –æ–Ω—ã —Å–æ“£—ã–Ω–¥–∞ –∂–∞“£–∞—Ä—Ç–∞–º—ã–∑:
    try:
        await loading_msg.edit_text("PDF generation complete! ‚úÖ")
    except Exception:
        pass

    # –ë—É—Ñ–µ—Ä–¥—ñ —Ç–∞–∑–∞–ª–∞–ø, –±–∞—Å—Ç–∞–ø“õ—ã –Ω“±—Å“õ–∞ “õ–∞–π—Ç–∞ —à—ã“ì–∞—Ä–∞–º—ã–∑
    user_data[user_id]["items"] = []
    await update.message.reply_text(
        trans["instruction_initial"],
        reply_markup=ReplyKeyboardMarkup([[trans["btn_change_lang"], trans["btn_help"]]], resize_keyboard=True)
    )
    return STATE_ACCUMULATE

async def trigger_change_lang(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    lang_code = get_user_lang(user_id)
    trans = load_translations(lang_code)
    await update.message.reply_text(trans["choose_language"], reply_markup=language_keyboard())
    return STATE_ACCUMULATE

async def trigger_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    lang_code = get_user_lang(user_id)
    trans = load_translations(lang_code)
    await update.message.reply_text(trans["help_text"])
    return STATE_ACCUMULATE

# --- –ñ–µ—Ç—ñ–ª–¥—ñ—Ä—ñ–ª–≥–µ–Ω –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—ñ ---

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if str(user_id) != ADMIN_ID:
        return
    lang_code = get_user_lang(user_id)
    trans = load_translations(lang_code)
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üì¢ –•–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä—É", callback_data="admin_broadcast")],
        [InlineKeyboardButton("üîÄ –§–æ—Ä–≤–∞—Ä–¥ —Ö–∞–±–∞—Ä–ª–∞–º–∞", callback_data="admin_forward")],
        [InlineKeyboardButton("üìä –¢–æ–ª—ã“õ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton("‚ùå –ñ–∞–±—É", callback_data="admin_cancel")]
    ])
    await update.message.reply_text("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—ñ:", reply_markup=keyboard)
    return ADMIN_MENU

async def admin_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    lang_code = get_user_lang(user_id)
    trans = load_translations(lang_code)
    data = query.data

    if data == "admin_broadcast":
        await query.edit_message_text("–ñ—ñ–±–µ—Ä–≥—ñ“£—ñ–∑ –∫–µ–ª–µ—Ç—ñ–Ω —Ö–∞–±–∞—Ä–ª–∞–º–∞–Ω—ã –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑ (–±–∞—Ä–ª—ã“õ –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã–ª–∞—Ä“ì–∞ –∂—ñ–±–µ—Ä—ñ–ª–µ–¥—ñ):")
        return ADMIN_BROADCAST
    elif data == "admin_forward":
        await query.edit_message_text("–§–æ—Ä–≤–∞—Ä–¥—Ç–∞–π—Ç—ã–Ω —Ö–∞–±–∞—Ä–ª–∞–º–∞–Ω—ã —Ç–∞“£–¥–∞“£—ã–∑ (–æ–Ω—ã –±–∞—Ä–ª—ã“ì—ã–Ω–∞ –±–∞“ì—ã—Ç—Ç–∞–π–º—ã–∑):")
        return ADMIN_FORWARD
    elif data == "admin_stats":
        await show_admin_stats(update, context)
        return ADMIN_MENU
    elif data == "admin_cancel":
        await query.edit_message_text("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—ñ –∂–∞–±—ã–ª–¥—ã.")
        return ConversationHandler.END
    else:
        return ADMIN_MENU

async def admin_broadcast_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    admin_msg = update.message.text
    user_ids = get_all_users()
    sent = 0
    for uid in user_ids:
        try:
            await context.bot.send_message(chat_id=uid, text=f"[–ê–¥–º–∏–Ω —Ö–∞–±–∞—Ä–ª–∞–º–∞—Å—ã]\n\n{admin_msg}")
            sent += 1
        except Exception as e:
            logger.error(f"Error sending broadcast to {uid}: {e}")
    await update.message.reply_text(f"–•–∞–±–∞—Ä–ª–∞–º–∞ {sent} –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã“ì–∞ –∂—ñ–±–µ—Ä—ñ–ª–¥—ñ.")
    return ADMIN_MENU

async def admin_forward_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    admin_msg: Message = update.message
    user_ids = get_all_users()
    forwarded = 0
    for uid in user_ids:
        try:
            await admin_msg.forward(chat_id=uid)
            forwarded += 1
        except Exception as e:
            logger.error(f"Error forwarding message to {uid}: {e}")
    await update.message.reply_text(f"–•–∞–±–∞—Ä–ª–∞–º–∞ {forwarded} –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã“ì–∞ —Ñ–æ—Ä–≤–∞—Ä–¥—Ç–∞–ª–¥—ã.")
    return ADMIN_MENU

async def show_admin_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        with open(STATS_FILE, "r") as f:
            stats = json.load(f)
    except Exception:
        stats = {"total": 0, "items": 0, "pdf_count": 0}
    try:
        with open(USERS_FILE, "r") as f:
            users = json.load(f)
    except Exception:
        users = {}
    total_users = len(users)
    language_counts = {}
    for lang in users.values():
        language_counts[lang] = language_counts.get(lang, 0) + 1

    stat_text = (
        f"üìä –¢–æ–ª—ã“õ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"‚Ä¢ –ñ–∞–ª–ø—ã ”ô—Ä–µ–∫–µ—Ç —Å–∞–Ω—ã: {stats.get('total', 0)}\n"
        f"‚Ä¢ –ñ–∏–Ω–∞“õ—Ç–∞–ª“ì–∞–Ω —ç–ª–µ–º–µ–Ω—Ç—Ç–µ—Ä: {stats.get('items', 0)}\n"
        f"‚Ä¢ PDF —Ñ–∞–π–ª–¥–∞—Ä —Å–∞–Ω—ã: {stats.get('pdf_count', 0)}\n"
        f"‚Ä¢ –ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã–ª–∞—Ä —Å–∞–Ω—ã: {total_users}\n"
    )
    for lang, count in language_counts.items():
        stat_text += f"   - {lang.upper()}: {count}\n"
    await update.effective_chat.send_message(stat_text)
    return ADMIN_MENU

async def admin_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—ñ –∂–∞–±—ã–ª–¥—ã.")
    return ConversationHandler.END

# --- –§–æ–ª–ª–±—ç–∫ ---
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in user_data:
        del user_data[user_id]
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è —Ç–æ“õ—Ç–∞—Ç—ã–ª–¥—ã. /start –∞—Ä“õ—ã–ª—ã “õ–∞–π—Ç–∞ –±–∞—Å—Ç–∞“£—ã–∑.")
    return ConversationHandler.END

# --- –ù–µ–≥—ñ–∑–≥—ñ —Ñ—É–Ω–∫—Ü–∏—è ---
if __name__ == "__main__":
    application = ApplicationBuilder().token(BOT_TOKEN).build()

    # –ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã“ì–∞ –∞—Ä–Ω–∞–ª“ì–∞–Ω ConversationHandler (PDF –∂–∏–Ω–∞—É)
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            STATE_ACCUMULATE: [
                MessageHandler(filters.ALL & ~filters.COMMAND, accumulate_handler)
            ]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )
    application.add_handler(conv_handler)

    # –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—ñ ConversationHandler
    admin_conv_handler = ConversationHandler(
        entry_points=[CommandHandler("admin", admin_panel)],
        states={
            ADMIN_MENU: [
                CallbackQueryHandler(admin_menu_handler, pattern="^admin_")
            ],
            ADMIN_BROADCAST: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, admin_broadcast_handler)
            ],
            ADMIN_FORWARD: [
                MessageHandler(filters.ALL & ~filters.COMMAND, admin_forward_handler)
            ]
        },
        fallbacks=[CommandHandler("cancel", admin_cancel)]
    )
    application.add_handler(admin_conv_handler)

    # –¢—ñ–ª–¥—ñ ”©–∑–≥–µ—Ä—Ç—É “Ø—à—ñ–Ω CallbackQueryHandler
    application.add_handler(CallbackQueryHandler(change_language, pattern="^lang_"))

    # –ï–≥–µ—Ä –±–∞—Å“õ–∞ —Ö–∞–±–∞—Ä–ª–∞–º–∞–ª–∞—Ä –∫–µ–ª—Å–µ, –æ–ª–∞—Ä–¥—ã –∂–∏–Ω–∞“õ—Ç–∞—É —Ä–µ–∂–∏–º—ñ–Ω–µ –±–∞“ì—ã—Ç—Ç–∞–π–º—ã–∑
    application.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, accumulate_handler))

    # --- –°–µ—Ä–≤–µ—Ä–º–µ–Ω –±–∞–π–ª–∞–Ω—ã—Å ---
    if os.environ.get("WEBHOOK_URL"):
        application.run_webhook(
            listen="0.0.0.0",
            port=int(os.environ.get("PORT", 10000)),
            webhook_url=os.environ.get("WEBHOOK_URL")
        )
    else:
        application.run_polling()
